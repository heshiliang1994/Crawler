<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-3.2.xsd">
    
    <context:annotation-config/>
    <!-- 配置数据库连接池信息 -->
	<context:property-placeholder location="*.properties" />
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   
    	<property name="url" value="${jdbc.url}" />  
    	<property name="username" value="${jdbc.username}" />  
    	<property name="password" value="${jdbc.password}" />    
    	<property name="filters" value="${jdbc.filters}" />  
    	<property name="maxActive" value="${jdbc.maxActive}" />  
    	<property name="initialSize" value="${jdbc.initialSize}" />  
    	<property name="maxWait" value="${jdbc.maxWait}" />  
    	<property name="minIdle" value="${jdbc.minIdle}" />  
    	<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />  
    	<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />  
   		<property name="validationQuery" value="${jdbc.validationQuery}" />  
    	<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />  
    	<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />  
    	<property name="testOnReturn" value="${jdbc.testOnReturn}" />  
    	<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />  
    	<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />  
	</bean>
	<!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory"
        class="org.mybatis.spring.SqlSessionFactoryBean"
        p:dataSource-ref="dataSource"
        p:configLocation="mybatis-config.xml"
        p:mapperLocations="com/hsl/crawler/mapper/*.xml"/>
    <!-- spring与mybatis整合配置，扫描所有mapper -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
         p:basePackage="com.hsl.crawler.mapper" 
         p:sqlSessionFactoryBeanName="sqlSessionFactory"/>
    <!-- 对数据源进行事务管理 -->
    <bean id="transactionManager" 
         class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
         p:dataSource-ref="dataSource"/>
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <!-- 爬虫http连接池配置 -->
    <!-- HTTPClient连接池 ，保持长连接，减少因为建立连接的时间 -->
    <bean id="httpClientConnectionManager"
        class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager"
        destroy-method="close">
        <!-- 最大连接数 -->
        <property name="maxTotal" value="1000" />
        <!-- 设置每个主机地址的并发数 -->
        <property name="defaultMaxPerRoute" value="1000" />
    </bean>
	
	<!-- 配置cookie -->
	<bean id="cookieStore" class="org.apache.http.impl.client.BasicCookieStore" scope="singleton"/>
	
    <!-- httpclient对象构建器 -->
    <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder">
        <!-- 设置连接管理器 -->
        <property name="connectionManager" ref="httpClientConnectionManager" />
        <property name="defaultCookieStore" ref="cookieStore" />
    </bean>
    
    <!-- 定义Httpclient对象 -->
    <bean id="httpClient" class="org.apache.http.impl.client.CloseableHttpClient"
        factory-bean="httpClientBuilder" factory-method="build" scope="prototype"/>
   
    <!-- requestConfig工厂 -->
    <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig.Builder">
        <!-- 创建连接的最长时间 -->
        <property name="connectTimeout" value="5000"/>
        <!-- 从连接池中获取到连接的最长时间 -->
        <!-- <property name="connectionRequestTimeout" value="${http.connectionRequestTimeout}"/> -->
        <!-- 数据传输的最长时间 -->
        <!-- <property name="socketTimeout" value="${http.socketTimeout}"/> -->
        <!-- 提交请求前测试连接是否可用 -->
        <!-- <property name="staleConnectionCheckEnabled" value="${http.staleConnectionCheckEnabled}"/> -->
    </bean>
    <!-- 定义请求参数 -->
    <bean id="requestConfig" class="org.apache.http.client.config.RequestConfig" factory-bean="requestConfigBuilder" factory-method="build"/>
    
    <!-- get方法 生成器 -->
    <bean id="httpGetFactory" class="com.hsl.crawler.base.impl.HttpGetFactoryImpl">
        <property name="headers">
	 		<map>
	 			<entry key="Accept" value="text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3"/>
	 			<entry key="Accept-Encoding" value="gzip, deflate, br"/>
	 			<entry key="Accept-Language" value="zh-CN,zh;q=0.9"/>
	 			<entry key="Cache-Control" value="max-age=0"/>
	 			<entry key="Connection" value="keep-alive"/>
	 			<entry key="Host" value="www.lagou.com"/>
				<entry key="Upgrade-Insecure-Requests" value="1"/>
				<entry key="User-Agent" value="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36"/>
			</map>       
       </property>
       <property name="timeout" value="5000"/>
    </bean>
    <!-- post方法 生成器 -->
    <bean id="httpPostFactory" class="com.hsl.crawler.base.impl.HttpPostFactoryImpl">
        <property name="headers">
	 		<map>
	 			<!-- cookie由httpClient自己维护，请求中不用设置cookie -->
	 			<!-- <entry key="Cookie" value="${Cookie}"/> -->
	 			<entry key="Origin" value="${Origin}"/>
	 			<entry key="X-Anit-Forge-Code" value="${X-Anit-Forge-Code}"/>
	 			<entry key="Accept-Encoding" value="${Accept-Encoding}"/>
	 			<entry key="Accept-Language" value="${Accept-Language}"/>
	 			<entry key="User-Agent" value="${User-Agent}"/>
	 			<entry key="Content-Type" value="${Content-Type}"/>
				<entry key="Accept" value="${Accept}"/>
				<entry key="Referer" value="${Referer}"/>
				<entry key="X-Requested-With" value="${X-Requested-With}"/>
				<entry key="Connection" value="${Connection}"/>
				<entry key="X-Anit-Forge-Token" value="${X-Anit-Forge-Token}"/>
			</map>    
       </property>
       <property name="params">
	 		<map>
	 			<entry key="first" value="false"/>
	 			<entry key="kd" value="${kd}"/>
	 		</map>
       </property>
       <property name="timeout" value="5000"/>
       <property name="uri">
			<bean id="address" class="java.net.URI">
				<constructor-arg index="0" value="${uri}"/>
			</bean>
       </property>
    </bean>
    
    <!-- get方法 生成器 -->
    <bean id="httpGet" class="org.apache.http.client.methods.HttpGet" factory-bean="httpGetFactory" factory-method="instance"  scope="prototype"/>
    <!-- get方法 生成器 -->
    <bean id="httpPost" class="org.apache.http.client.methods.HttpPost" factory-bean="httpPostFactory" factory-method="instance"  scope="prototype"/>
       
    <!-- 配置具体工作内容 -->
    <bean id="lagouJobContentExtract" class="com.hsl.crawler.extract.impl.LagouJobContentExtract" scope="prototype"/>
    <!-- 提取job列表 -->
    <bean id="lagouJobListExtract" class="com.hsl.crawler.extract.impl.LagouJobListExtract" scope="prototype"/>
    <!-- 获取拉钩工作列表 -->
    <bean id="lagouGetJobList" class="com.hsl.crawler.list.impl.LagouGetJobList" scope="prototype">
    	<!-- <property name="jobListExtract" ref="lagouJobListExtract"/>
    	<property name="jobListMapper" ref="jobListMapper"/> -->
    </bean>
    
    <!-- 工具类 -->
    <bean id="loadProperties" class="com.hsl.crawler.util.LoadProperties">
    	<constructor-arg name="filePath" value="requestinfo.properties"/>
    </bean>
    <!-- 日志 -->
    <bean id="logging" class= "com.hsl.crawler.log.Logging" />
    <aop:config>
    	<aop:aspect id="logAspect" ref="logging">
    		<aop:pointcut id="logPointcut" expression="execution(* com.hsl.crawler.extract..*.*(..))"/>
    		<!-- <aop:before method="beforeAdvice" pointcut-ref="logPointcut"/>
    		<aop:after method="afterAdvice" pointcut-ref="logPointcut"/> -->
    		<!-- returnVal设置的是返回值参数名 -->
    		<!-- <aop:after-returning method="afterReturningAdvice" pointcut-ref="logPointcut" returning="returnVal"/> -->
    		<aop:after-throwing method="afterThrowingAdvice" pointcut-ref="logPointcut" throwing="err"/>
    	</aop:aspect>
    </aop:config>
    
</beans>